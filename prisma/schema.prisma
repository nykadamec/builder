// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Subscription info
  plan          Plan      @default(FREE)
  stripeCustomerId String?
  subscriptionId   String?
  subscriptionStatus String?
  currentPeriodEnd DateTime?

  // Usage tracking
  aiCallsUsed   Int @default(0)
  projectsUsed  Int @default(0)
  exportsUsed   Int @default(0)
  
  // Reset monthly
  usageResetDate DateTime @default(now())

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  conversations Conversation[]
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Project configuration
  framework   String   @default("nextjs")
  styling     String   @default("tailwind")
  database    String   @default("postgresql")
  
  // Generated code and files
  files       ProjectFile[]
  
  // Project status
  status      ProjectStatus @default(DRAFT)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
}

enum ProjectStatus {
  DRAFT
  GENERATING
  COMPLETED
  ERROR
}

model ProjectFile {
  id        String   @id @default(cuid())
  projectId String
  filename  String
  content   String   @db.Text
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, path])
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  content        String   @db.Text
  role           MessageRole
  createdAt      DateTime @default(now())

  // AI specific fields
  aiModel        String?
  tokens         Int?
  cost           Float?

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  method    String
  timestamp DateTime @default(now())
  
  // Cost tracking
  tokens    Int?
  cost      Float?
  
  // Rate limiting
  ipAddress String?
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  tags        String[]
  
  // Template configuration
  framework   String
  styling     String
  features    String[]
  
  // Template files
  files       TemplateFile[]
  
  // Metadata
  isPublic    Boolean  @default(false)
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TemplateFile {
  id         String   @id @default(cuid())
  templateId String
  filename   String
  content    String   @db.Text
  path       String
  
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, path])
}