import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import JSZip from 'jszip'

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
      include: { usage: true }
    })

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    // Najít projekt
    const project = await prisma.project.findFirst({
      where: {
        id: params.id,
        userId: user.id
      },
      include: {
        files: true
      }
    })

    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 })
    }

    // Kontrola limitů exportů
    const planLimits = {
      FREE: { exportsPerMonth: 5 },
      PRO: { exportsPerMonth: 100 },
      ENTERPRISE: { exportsPerMonth: -1 } // unlimited
    }[user.plan]

    if (planLimits.exportsPerMonth !== -1 && user.usage && user.usage.exportsUsed >= planLimits.exportsPerMonth) {
      return NextResponse.json(
        { error: 'Export limit reached for your plan' },
        { status: 403 }
      )
    }

    // Vytvořit ZIP soubor
    const zip = new JSZip()
    
    // Přidat README
    zip.file('README.md', `# ${project.name}\n\n${project.description}\n\nGenerated by AI Code Builder`)
    
    // Přidat všechny soubory projektu
    project.files.forEach(file => {
      zip.file(file.path, file.content)
    })

    // Vygenerovat ZIP
    const zipBuffer = await zip.generateAsync({ type: 'nodebuffer' })

    // Aktualizovat počet exportů
    if (user.usage) {
      await prisma.usage.update({
        where: { userId: user.id },
        data: {
          exportsUsed: {
            increment: 1
          }
        }
      })
    }

    // Vrátit ZIP soubor
    return new NextResponse(zipBuffer, {
      headers: {
        'Content-Type': 'application/zip',
        'Content-Disposition': `attachment; filename="${project.slug}.zip"`
      }
    })

  } catch (error) {
    console.error('Export error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}